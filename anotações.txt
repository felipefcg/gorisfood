* Utilizar Anotação personalidada para qualificador de injeção de dependencia (Bean's)
	Ex: 
		-- Criação da minha anotação
		@Retention(RUNTIME)
		@Qualifier
		public @interface TipoDoNotificador {
			NivelUrgencia value();
		}
		
		-- Classe utilizando a anotação, no lugar do @Qualifier(...)
		@TipoDoNotificador(NivelUrgencia.SEM_URGENCIA)
		@Component
		public class NotificadorEmail implements Notificador {
	
* Utilizar init e destroy no ciclo de vida do Bean, seja na anotação @Bean ou na própria classe com @PostConstruct e @PreDestroy
	- @Bean(initMethod = "init", destroyMethod = "destroy");
	- @PostConstruct public void init() {...} / @PreDestroy public void destroy() {...}
	
* Events no Spring (https://www.baeldung.com/spring-events)
	- Injetar na sua classe "SERVICE" a class "ApplicationEventPublisher"
	- Para disparar o evento chamar o método "eventPublisher.publishEvent(new ClienteNotificacaoPublisher(cliente))"
	- Criar a sua classe de publicação (Publisher) de evento "ClienteNotificacaoPublisher", nesse caso recebe um "cliente"
		public class ClienteNotificacaoPublisher {
			private final Cliente cliente;
		}
	- Criar a(s) classe(s) que vão escutar o evento (Listeners) e o método que vai tratar o evento anotado com EventListener
		@Component
		public class NotificacaoClienteService {
			
			@TipoDoNotificador(NivelUrgencia.SEM_URGENCIA)
			@Autowired
			private Notificador notificador;
			
			@EventListener
			public void notificarCliente(ClienteNotificacaoPublisher event) {
				System.out.println("Notificando o cliente " + event.getCliente().getNome());
				notificador.notificar(event.getCliente(), "Seu cadastro no sistema está ativo!");
			}
		}
	- A forma configurada acima cria o evento de forma sincrona (default do spring)
	
	
* Retornar XML na resposta da requisição
	- Para permitir retornar XML deve ser incluido no POM a dependencia do Jackson-XML, para permitir o parse do objeto
		<dependency>
		  <groupId>com.fasterxml.jackson.dataformat</groupId>
		  <artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		
* Anotações para alterar informações no JSON e/ou XML
	- @JsonRootName("gastronomia"): Anota a classe para definir o nome do objeto no XML/JSON
	- @JsonIgnore: Anota o atributo da classe para que o mesmo não seja apresentado no XML/JSON
	- @JsonProperty("titulo"): Anota o atributo para mudar o nome do atributo no XML/JSON
	- @JacksonXmlRootElement(localName = "cozinhas") ou @JsonRootName(value = "cozinhas"): para classe Wrapper que vai ser o objeto Root do XML
	- @JsonProperty("cozinha") ou @JacksonXmlProperty(localName = "cozinhaX"): Vai dar o nome dos elementos da lista
	- @JacksonXmlElementWrapper(useWrapping = false): Remove a TAG que encapsula os objetos da lista
	
	EX: @JacksonXmlRootElement(localName = "cozinhas")
		//@JsonRootName(value = "cozinhas")
		@Data
		public class CozinhaXmlWrapper {

			@NonNull
			@JsonProperty("cozinha")
		//	@JacksonXmlProperty(localName = "cozinhaX")
			@JacksonXmlElementWrapper(useWrapping = false)
			private List<Cozinha> cozinhas;
		}
	
* Métodos HTTP
	- GET: consultar um recurso ou uma lista
	- POST: criar um recurso
	- PUT: Atualizar ou criar um recurso.
		- Criar: PUT /cozinhas/11 -> criar o recurso com o ID 11, ou se ja existir atualizar. 
				 Raramente é utilizado para essa finalidade de criação
		- Atualizar: Atualiza todo todo o recurso. 
					 Se na requisição foi passado apenas um atributo do recurso, irá atualizar o atributo com o valor informado e os demais ficarão em branco.
	- PATCH: Atualização parcial do recurso, apenas atualiza os dados informados
	- DELETE: Remove um recurso (seja físicamente ou logicamente)
	- HEAD: Pareceido com o GET, porém não retorna um corpo. 
			Utilizado apenas para buscar os cabeçalhos de um recurso
	- OPTIONS: retorna os métodos HTTP aceitos por um recurso
		
* Utilizar o BeanUtils para copiar valores de um objeto 1 para o objeto 2 desde que sejam a mesma classe.
	- org.springframework.beans.BeanUtils.copyProperties(source, target, "propriedadeIgnoradaNaCopia");
	- Essa situação não é um mapper
	
* Ao tentar fazermos um delete de um recurso (Ex: cozinha) que, por exemplo, não pode ser removido por ser FK para outro recurso (cozinha é FK de restaurantes),
podemos retornar o HTTP STATUS 409 (CONFLICT)

* Utilizando Exctions do Srpring
	- org.springframework.dao.DataIntegrityViolationException
	- org.springframework.dao.EmptyResultDataAccessException
	
* Utilizando NAMED QUERY: 
	- É possível utilizar Named Query utilizam a anotação @NamedQuery em cima do método, e dessa forma colocar a query na própria anotação ou no 
arquivo /META-INF/orm.xml
	- Ou nomeando a query no arquivo /META-INF/orm.xml com NomeEntidadeDominio.nomeDoMetodoDeQuery
	Ex conteudo do arquivo:
		<?xml version="1.0" encoding="UTF-8"?>
		<entity-mappings 
			xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
			version="2.2">

			<named-query name="Restaurante.consultaPorNomeETaxaFrete">
				<query>
					from Restaurante 
					where nome like concat('%',:nome,'%') 
					and taxaFrete between :taxaInicio and :taxaFim
				</query>
			</named-query>
		</entity-mappings>
	- o arquivo /META-INF/orm.xml geralmente é utilizado quando temos queries muito grande para deixar nas anotações em cima da assinatura dos métodos